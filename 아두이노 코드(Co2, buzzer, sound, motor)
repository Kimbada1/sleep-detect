#include <cm1106_i2c.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
//#include <talkie.h>
#include <Servo.h>
LiquidCrystal_I2C lcd(0x27,16,2);


//Talkie voice;
//int buzzer = 2;

Servo servo;      //Servo 클래스로 servo객체 생성
int value = 0;

CM1106_I2C cm1106_i2c;

//const uint8_t sp1[] PROGMEM = {0x00, 0xaa, 0x1f, 0xdc, 0xcc, 0x4c, 0x6d, 0x22, 0xe0, 0x28, 0x71, 0x06, 0x5c, 0x27, 0x59, 0x94, 0x49, 0x30, 0x7c, 0xdc, 0x4d, 0x53, 0x89, 0xed, 0x2d, 0x45, 0xa7, 0x4d, 0x66, 0x36, 0x4e, 0x83, 0xdc, 0x36, 0x99, 0xac, 0x28, 0x0a, 0x72, 0x53, 0x14, 0xf2, 0xd4, 0x68, 0x58, 0x75, 0x52, 0xe9, 0x27, 0x97, 0x26, 0xd5, 0x49, 0xa3, 0x5f, 0x92, 0x03, 0xdc, 0x34, 0x1d, 0x3f, 0x4f, 0x75, 0x52, 0x9c, 0x0c, 0xb0, 0x3b, 0xa5, 0x58, 0x13, 0xd3, 0xc0, 0x1f, 0x63, 0x53, 0xa7, 0x48, 0x03, 0xbf, 0xb2, 0x84, 0xd5, 0x16, 0xad, 0x31, 0xd5, 0x48, 0xb3, 0xab, 0x80, 0x16, 0x88, 0x8b, 0xa8, 0x8d, 0x56, 0xb7, 0x5b, 0x1a, 0x1a, 0x2b, 0x51, 0x91, 0xc8, 0xb8, 0xe9, 0xa8, 0x47, 0x9b, 0xa3, 0xeb, 0x60, 0x82, 0x35, 0x85, 0xc9, 0x99, 0x93, 0x05, 0x4e, 0x85, 0x16, 0xb3, 0x69, 0x26, 0xb9, 0x92, 0xde, 0xc0, 0xa8, 0xe8, 0xf8, 0x89, 0xdb, 0x22, 0xa6, 0xa4, 0x83, 0xd3, 0x09, 0x27, 0x89, 0x93, 0x0a, 0xce, 0x36, 0xb4, 0x24, 0x4d, 0x0a, 0x78, 0x93, 0x30, 0xe2, 0x2c, 0x28, 0xe0, 0x77, 0x41, 0xa9, 0x5b, 0xa7, 0x80, 0xbf, 0x03, 0x65, 0x6e, 0x9c, 0x06, 0xfe, 0x99, 0x48, 0xd8, 0x1d, 0x32, 0x6b, 0x15, 0xa9, 0xa2, 0x78, 0xc8, 0xfc, 0x6b, 0x19, 0x93, 0xab, 0xa6, 0xf0, 0x4f, 0x15, 0x8e, 0x8a, 0x9c, 0x0e, 0x9f, 0xa8, 0x1c, 0x31, 0x71, 0x3a, 0x78, 0x6a, 0xba, 0xe4, 0x66, 0x89, 0xfa, 0x48, 0x7a, 0xb3, 0xa7, 0x23, 0x84, 0x6b, 0x69, 0x4e, 0xae, 0x8f, 0x10, 0xb6, 0x97, 0xaa, 0x38, 0x3a, 0x52, 0x18, 0x5e, 0xaa, 0x52, 0x69, 0xe9, 0x2e, 0xea, 0x18, 0x69, 0xe5, 0x64, 0x80, 0xe7, 0xa6, 0x2e, 0x65, 0x8d, 0x05, 0x7e, 0x09, 0x94, 0x2e, 0x19, 0x16, 0x5e, 0x65, 0x69, 0xa8, 0xb8, 0x69, 0xf4, 0x49, 0x95, 0xa1, 0xc3, 0xa4, 0x90, 0x47, 0x15, 0x8e, 0xae, 0x8c, 0x0e, 0x1e, 0x67, 0x15, 0xab, 0x26, 0x3a, 0xf8, 0x2e, 0xe6, 0xee, 0x38, 0x69, 0x03, 0x70, 0x45, 0xa7, 0x2d, 0xa7, 0x15, 0x60, 0x19, 0x15, 0x49, 0x82, 0x5a, 0x84, 0x8a, 0xbb, 0xdb, 0x0d, 0x7c, 0xe1, 0xaa, 0x19, 0x61, 0x27, 0x68, 0x60, 0x76, 0x96, 0xb2, 0xd3, 0xa0, 0x81, 0x5f, 0xce, 0x41, 0x59, 0x83, 0x0e, 0x7e, 0x39, 0x85, 0x26, 0x4d, 0x3a, 0xf8, 0xad, 0xea, 0x92, 0xb4, 0x99, 0xa0, 0x7d, 0x85, 0x8b, 0x12, 0x67, 0x81, 0x5f, 0x0e, 0xe9, 0x6e, 0x8d, 0x0d, 0x7e, 0x09, 0xfa, 0xd8, 0x73, 0x0e, 0xf8, 0x6b, 0xa0, 0x53, 0xd5, 0x78, 0xe0, 0xad, 0x82, 0xf8, 0xdc, 0xe2, 0x10, 0x1f, 0xee, 0x1e, 0x51, 0x9a, 0xcb, 0x5d, 0xa5, 0x09, 0xcd, 0x1e, 0x91, 0x8c, 0xee, 0xaa, 0x5a, 0x67, 0xc5, 0x21, 0x9a, 0x8b, 0x72, 0x93, 0x95, 0xc4, 0x24, 0xa1, 0x4a, 0xb5, 0x57, 0x1a, 0xa3, 0xb8, 0x29, 0x35, 0x19, 0x52, 0x88, 0x6c, 0x61, 0x34, 0xa7, 0xa9, 0x2e, 0x8a, 0xa5, 0x71, 0x9d, 0xa4, 0x88, 0x28, 0xde, 0x26, 0x49, 0x9d, 0x89, 0xa3, 0x54, 0x87, 0xb9, 0x13, 0x2e, 0x0e, 0xdc, 0xd5, 0xae, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0xb4, 0xab, 0x00, 0x9a, 0x8e, 0x30, 0x40, 0xb7, 0x11, 0x87, 0x09, 0xde, 0xdc, 0xdd, 0xd2, 0x1c, 0x3e, 0x44, 0x0d, 0x37, 0x49, 0xbc, 0x04, 0x5e, 0xc2, 0xa4, 0x24, 0x5d, 0x13, 0x48, 0x2b, 0xc7, 0xb1, 0xf6, 0x4d, 0x84, 0x37, 0xd4, 0xda, 0xda, 0x16, 0x11, 0x9c, 0x71, 0xee, 0x88, 0x9f, 0x24, 0xf0, 0xc6, 0xe8, 0xbc, 0x7e, 0x93, 0xc0, 0x0b, 0xb7, 0xd4, 0x26, 0x4d, 0xa2, 0x8b, 0xb3, 0x93, 0x39, 0x0d, 0x19, 0xb7, 0x4a, 0x0b, 0xe1, 0x9c, 0x64, 0xf0, 0x27, 0x29, 0xc5, 0x6d, 0x92, 0xc1, 0xdf, 0xc4, 0x16, 0x67, 0x43, 0x02, 0xa7, 0xd3, 0x8d, 0xda, 0x1c, 0x81, 0x96, 0xce, 0x10, 0x4a, 0x73, 0x04, 0xe9, 0x63, 0x4a, 0x51, 0xeb, 0x11, 0x95, 0xaf, 0x4e, 0x45, 0x35, 0x47, 0xb1, 0xba, 0x7b, 0x1c, 0x94, 0x1c, 0x2b, 0xb0, 0xe8, 0x2b, 0x54, 0x3c, 0x82, 0x40, 0xa2, 0x37, 0x41, 0x75, 0x8a, 0xa9, 0xdb, 0x76, 0x84, 0x54, 0xc1, 0x07, 0x63, 0x4b, 0xc0, 0x1a, 0x05, 0x1f, 0xf4, 0x1e, 0xe6, 0xb0, 0xdc, 0x5c, 0xdc, 0xc7, 0x84, 0xb4, 0xce, 0x72, 0xc4, 0x0e, 0x67, 0xd6, 0x24, 0xc7, 0x34, 0xcb, 0x53, 0x94, 0x9d, 0x1c, 0xdd, 0x0d, 0xeb, 0x30, 0x54, 0x7c, 0x34, 0xb3, 0x2c, 0x4c, 0x31, 0x49, 0x53, 0x51, 0x2b, 0xf7, 0xa0, 0x26, 0x45, 0x0b, 0xcc, 0x23, 0xd3, 0x9d, 0x14, 0xb7, 0x6b, 0x13, 0x37, 0x91, 0x53, 0xa4, 0xc4, 0x39, 0x33, 0x35, 0x71, 0xd3, 0x85, 0xb0, 0xed, 0xa4, 0xa6, 0xcd, 0x62, 0x2a, 0x36, 0x8c, 0x9a, 0x36, 0x8f, 0xea, 0x58, 0x63, 0x5e, 0xd2, 0x02, 0xa1, 0x62, 0x99, 0xb9, 0x75, 0x89, 0x85, 0xad, 0x66, 0xa1, 0xd6, 0x2d, 0x56, 0xd6, 0x4b, 0x1c, 0x53, 0xb7, 0xd8, 0x26, 0x75, 0x09, 0x72, 0x55, 0x12, 0xdf, 0xd8, 0xc3, 0xd1, 0x55, 0x49, 0x43, 0x23, 0xcd, 0x20, 0x4f, 0x45, 0x0a, 0x9d, 0x24, 0x53, 0xd4, 0x24, 0xc5, 0x36, 0x92, 0x0e, 0x67, 0x13, 0x1c, 0xdb, 0x51, 0xb2, 0x9c, 0xa9, 0xf1, 0x68, 0x23, 0xf1, 0x69, 0x25, 0xca, 0x84, 0x83, 0xa2, 0xb7, 0xd2, 0x22, 0xd5, 0x37, 0x26, 0x8d, 0x48, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff};

// #define CM1107

void setup() {
  //pinMode(buzzer, OUTPUT);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0,0);
  lcd.print("co2 : ");
  servo.attach(7);
  value = 0;
  servo.write(value);
  cm1106_i2c.begin();
  Serial.begin(115200);
  delay(1000);
  cm1106_i2c.read_serial_number();
  delay(1000);
  cm1106_i2c.check_sw_version();
  delay(1000);
}

void loop() {
  uint8_t ret = cm1106_i2c.measure_result();

  if (ret == 0) {
    Serial.print("Co2 : ");
    Serial.println(cm1106_i2c.co2);
    lcd.setCursor(6,0);
    lcd.print(cm1106_i2c.co2);
    lcd.setCursor(11,0);
    lcd.print("ppm");
    Serial.println("Status >>");

  if (cm1106_i2c.co2 > 2200) {
    lcd.setCursor(0,1);
    lcd.print("Waring!!");
    tone(buzzer, 392);
    delay(100);
    noTone(buzzer);
    delay(50);
    voice.say(sp1);
      if (cm1106_i2c.co2 > 2500) {
        value = 150;
        servo.write(value);
        noTone(3);
    }
  }

  else {
    noTone(3);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("co2 : ");
    lcd.setCursor(6,0);
    lcd.print(cm1106_i2c.co2);
    lcd.setCursor(11,0);
    lcd.print("ppm");
  }


 #if defined(CM1107)
    if (cm1106_i2c.status & (1 << CM1106_I2C_STATUS_CM1107_PREHEATING)) {
      Serial.println("Preheating");
    } else {
      Serial.println("Preheat complete");
    }

    if (cm1106_i2c.status & (1 << CM1106_I2C_STATUS_CM1107_OPERATING_NORMAL)) {
      Serial.println("Sensor Error");
    } else {
      Serial.println("Operating normal");
    }

    if (cm1106_i2c.status & (1 << CM1106_I2C_STATUS_CM1107_OVER_MEASUREMENT_RANGE)) {
      Serial.println("Over Measurement Range");
    } else {
      Serial.println("Normal Measurement Range");
    }

    if (cm1106_i2c.status & (1 << CM1106_I2C_STATUS_CM1107_LESS_THAN_MEASUREMENT_RANGE)) {
      Serial.println("Less than Measurement Range");
    } else {
      Serial.println("Normal Measurement Range");
    }

    if (cm1106_i2c.status & (1 << CM1106_I2C_STATUS_CM1107_CALIBRATED)) {
      Serial.println("Non-calibrated");
    } else {
      Serial.println("Calibrated");
    }

    if (cm1106_i2c.status & (1 << CM1106_I2C_STATUS_CM1107_LIGHT_AGING)) {
      Serial.println("Light Aging");
    } else {
      Serial.println("Light Normal");
    }

    if (cm1106_i2c.status & (1 << CM1106_I2C_STATUS_CM1107_DRIFT)) {
      Serial.println("Drift");
    } else {
      Serial.println("Non-Drift");
    }

#else
    switch (cm1106_i2c.status) {
      case CM1106_I2C_STATUS_PREHEATING: {
          Serial.println("Preheating");
          break;
        }
      case CM1106_I2C_STATUS_NORMAL_OPERATION: {
          Serial.println("Normal operation");
          break;
        }
      case CM1106_I2C_STATUS_OPERATING_TROUBLE: {
          Serial.println("Operating trouble");
          break;
        }
      case CM1106_I2C_STATUS_OUT_OF_FS: {
          Serial.println("Out of FS");
          break;
        }
      case CM1106_I2C_STATUS_NON_CALIBRATED: {
          Serial.println("Non calibrated");
          break;
        }
    }
#endif
  }
  delay(250);
} 
